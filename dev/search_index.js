var documenterSearchIndex = {"docs":
[{"location":"markdown/NonStiffODE/LotkaVolterra_wpd/","page":"-","title":"-","text":"","category":"page"},{"location":"markdown/NonStiffODE/LotkaVolterra_wpd/","page":"-","title":"-","text":"author: \"Chris Rackauckas\" title: \"Lotka-Volterra Work-Precision Diagrams\" â€“-","category":"page"},{"location":"markdown/NonStiffODE/LotkaVolterra_wpd/#Lotka-Volterra","page":"-","title":"Lotka-Volterra","text":"","category":"section"},{"location":"markdown/NonStiffODE/LotkaVolterra_wpd/","page":"-","title":"-","text":"The purpose of this problem is to test the performance on easy problems. Since it's periodic, the error is naturally low, and so most of the difference will come down to startup times and, when measuring the interpolations, the algorithm choices.","category":"page"},{"location":"markdown/NonStiffODE/LotkaVolterra_wpd/","page":"-","title":"-","text":"using OrdinaryDiffEq, ParameterizedFunctions, ODE, ODEInterfaceDiffEq, LSODA,\n      Sundials, DiffEqDevTools\n\nf = @ode_def LotkaVolterra begin\n  dx = a*x - b*x*y\n  dy = -c*y + d*x*y\nend a b c d\n\np = [1.5,1.0,3.0,1.0]\nprob = ODEProblem(f,[1.0;1.0],(0.0,10.0),p)\n\nabstols = 1.0 ./ 10.0 .^ (6:13)\nreltols = 1.0 ./ 10.0 .^ (3:10);\nsol = solve(prob,Vern7(),abstol=1/10^14,reltol=1/10^14)\ntest_sol = TestSolution(sol)\nusing Plots; gr()","category":"page"},{"location":"markdown/NonStiffODE/LotkaVolterra_wpd/","page":"-","title":"-","text":"Plots.GRBackend()","category":"page"},{"location":"markdown/NonStiffODE/LotkaVolterra_wpd/","page":"-","title":"-","text":"plot(sol)","category":"page"},{"location":"markdown/NonStiffODE/LotkaVolterra_wpd/","page":"-","title":"-","text":"(Image: )","category":"page"},{"location":"markdown/NonStiffODE/LotkaVolterra_wpd/#Low-Order","page":"-","title":"Low Order","text":"","category":"section"},{"location":"markdown/NonStiffODE/LotkaVolterra_wpd/","page":"-","title":"-","text":"setups = [Dict(:alg=>DP5())\n          #Dict(:alg=>ode45()) # fail\n          Dict(:alg=>dopri5())\n          Dict(:alg=>Tsit5())\n          Dict(:alg=>Vern6())\n]\nwp = WorkPrecisionSet(prob,abstols,reltols,setups;appxsol=test_sol,save_everystep=false,maxiters=10000,numruns=100)\nplot(wp)","category":"page"},{"location":"markdown/NonStiffODE/LotkaVolterra_wpd/","page":"-","title":"-","text":"(Image: )","category":"page"},{"location":"markdown/NonStiffODE/LotkaVolterra_wpd/","page":"-","title":"-","text":"Here we see the OrdinaryDiffEq.jl algorithms once again far in the lead.","category":"page"},{"location":"markdown/NonStiffODE/LotkaVolterra_wpd/#Interpolation-Error","page":"-","title":"Interpolation Error","text":"","category":"section"},{"location":"markdown/NonStiffODE/LotkaVolterra_wpd/","page":"-","title":"-","text":"Since the problem is periodic, the real measure of error is the error throughout the solution.","category":"page"},{"location":"markdown/NonStiffODE/LotkaVolterra_wpd/","page":"-","title":"-","text":"setups = [Dict(:alg=>DP5())\n          #Dict(:alg=>ode45())\n          Dict(:alg=>Tsit5())\n          Dict(:alg=>Vern6())\n]\nwp = WorkPrecisionSet(prob,abstols,reltols,setups;appxsol=test_sol,maxiters=10000,error_estimate=:L2,dense_errors=true,numruns=100)\nplot(wp)","category":"page"},{"location":"markdown/NonStiffODE/LotkaVolterra_wpd/","page":"-","title":"-","text":"(Image: )","category":"page"},{"location":"markdown/NonStiffODE/LotkaVolterra_wpd/","page":"-","title":"-","text":"Here we see the power of algorithm specific interpolations. The ODE.jl algorithm is only able to reach 10^-7 error even at a tolerance of 10^-13, while the DifferentialEquations.jl algorithms are below 10^-10","category":"page"},{"location":"markdown/NonStiffODE/LotkaVolterra_wpd/#Higher-Order","page":"-","title":"Higher Order","text":"","category":"section"},{"location":"markdown/NonStiffODE/LotkaVolterra_wpd/","page":"-","title":"-","text":"setups = [Dict(:alg=>DP8())\n          #Dict(:alg=>ode78()) # fails\n          Dict(:alg=>Vern7())\n          Dict(:alg=>Vern8())\n          Dict(:alg=>dop853())\n          Dict(:alg=>Vern6())\n]\nwp = WorkPrecisionSet(prob,abstols,reltols,setups;appxsol=test_sol,save_everystep=false,maxiters=1000,numruns=100)\nplot(wp)","category":"page"},{"location":"markdown/NonStiffODE/LotkaVolterra_wpd/","page":"-","title":"-","text":"(Image: )","category":"page"},{"location":"markdown/NonStiffODE/LotkaVolterra_wpd/","page":"-","title":"-","text":"setups = [Dict(:alg=>odex())\n          Dict(:alg=>ddeabm())\n          Dict(:alg=>Vern7())\n          Dict(:alg=>Vern8())\n          Dict(:alg=>CVODE_Adams())\n          Dict(:alg=>lsoda())\n          Dict(:alg=>Vern6())\n          Dict(:alg=>ARKODE(Sundials.Explicit(),order=6))\n          ]\nwp = WorkPrecisionSet(prob,abstols,reltols,setups;appxsol=test_sol,save_everystep=false,maxiters=1000,numruns=100)\nplot(wp)","category":"page"},{"location":"markdown/NonStiffODE/LotkaVolterra_wpd/","page":"-","title":"-","text":"(Image: )","category":"page"},{"location":"markdown/NonStiffODE/LotkaVolterra_wpd/","page":"-","title":"-","text":"Again we look at interpolations:","category":"page"},{"location":"markdown/NonStiffODE/LotkaVolterra_wpd/","page":"-","title":"-","text":"setups = [Dict(:alg=>DP8())\n          #Dict(:alg=>ode78())\n          Dict(:alg=>Vern7())\n          Dict(:alg=>Vern8())\n          Dict(:alg=>Vern6())\n]\nwp = WorkPrecisionSet(prob,abstols,reltols,setups;appxsol=test_sol,dense=true,maxiters=1000,error_estimate=:L2,numruns=100)\nplot(wp)","category":"page"},{"location":"markdown/NonStiffODE/LotkaVolterra_wpd/","page":"-","title":"-","text":"(Image: )","category":"page"},{"location":"markdown/NonStiffODE/LotkaVolterra_wpd/","page":"-","title":"-","text":"Again, the ODE.jl algorithms suffer when measuring the interpolations due to relying on an order 3 Hermite polynomial instead of an algorithm-specific order matching interpolation which uses the timesteps.","category":"page"},{"location":"markdown/NonStiffODE/LotkaVolterra_wpd/#Comparison-with-Non-RK-methods","page":"-","title":"Comparison with Non-RK methods","text":"","category":"section"},{"location":"markdown/NonStiffODE/LotkaVolterra_wpd/","page":"-","title":"-","text":"Now let's test Tsit5 and Vern9 against parallel extrapolation methods and an Adams-Bashforth-Moulton:","category":"page"},{"location":"markdown/NonStiffODE/LotkaVolterra_wpd/","page":"-","title":"-","text":"setups = [Dict(:alg=>Tsit5())\n          Dict(:alg=>Vern9())\n          Dict(:alg=>VCABM())\n          Dict(:alg=>AitkenNeville(min_order=1, max_order=9, init_order=4, threading=true))\n          Dict(:alg=>ExtrapolationMidpointDeuflhard(min_order=1, max_order=9, init_order=4, threading=true))\n          Dict(:alg=>ExtrapolationMidpointHairerWanner(min_order=2, max_order=11, init_order=4, threading=true))]\nsolnames = [\"Tsit5\",\"Vern9\",\"VCABM\",\"AitkenNeville\",\"Midpoint Deuflhard\",\"Midpoint Hairer Wanner\"]\nwp = WorkPrecisionSet(prob,abstols,reltols,setups;appxsol=test_sol,names=solnames,\n                      save_everystep=false,verbose=false,numruns=100)\nplot(wp)","category":"page"},{"location":"markdown/NonStiffODE/LotkaVolterra_wpd/","page":"-","title":"-","text":"(Image: )","category":"page"},{"location":"markdown/NonStiffODE/LotkaVolterra_wpd/","page":"-","title":"-","text":"setups = [Dict(:alg=>ExtrapolationMidpointDeuflhard(min_order=1, max_order=9, init_order=9, threading=false))\n          Dict(:alg=>ExtrapolationMidpointHairerWanner(min_order=2, max_order=11, init_order=4, threading=false))\n          Dict(:alg=>ExtrapolationMidpointHairerWanner(min_order=2, max_order=11, init_order=4, threading=true))\n          Dict(:alg=>ExtrapolationMidpointHairerWanner(min_order=2, max_order=11, init_order=4, sequence = :romberg, threading=true))\n          Dict(:alg=>ExtrapolationMidpointHairerWanner(min_order=2, max_order=11, init_order=4, sequence = :bulirsch, threading=true))]\nsolnames = [\"Deuflhard\",\"No threads\",\"standard\",\"Romberg\",\"Bulirsch\"]\nwp = WorkPrecisionSet(prob,abstols,reltols,setups;appxsol=test_sol,names=solnames,\n                      save_everystep=false,verbose=false,numruns=100)\nplot(wp)","category":"page"},{"location":"markdown/NonStiffODE/LotkaVolterra_wpd/","page":"-","title":"-","text":"(Image: )","category":"page"},{"location":"markdown/NonStiffODE/LotkaVolterra_wpd/","page":"-","title":"-","text":"setups = [Dict(:alg=>ExtrapolationMidpointHairerWanner(min_order=2, max_order=11, init_order=10, threading=true))\n          Dict(:alg=>ExtrapolationMidpointHairerWanner(min_order=2, max_order=11, init_order=4, threading=true))\n          Dict(:alg=>ExtrapolationMidpointHairerWanner(min_order=5, max_order=11, init_order=10, threading=true))\n          Dict(:alg=>ExtrapolationMidpointHairerWanner(min_order=2, max_order=15, init_order=10, threading=true))\n          Dict(:alg=>ExtrapolationMidpointHairerWanner(min_order=5, max_order=7, init_order=6, threading=true))]\nsolnames = [\"1\",\"2\",\"3\",\"4\",\"5\"]\nwp = WorkPrecisionSet(prob,abstols,reltols,setups;appxsol=test_sol,names=solnames,\n                      save_everystep=false,verbose=false,numruns=100)\nplot(wp)","category":"page"},{"location":"markdown/NonStiffODE/LotkaVolterra_wpd/","page":"-","title":"-","text":"(Image: )","category":"page"},{"location":"markdown/NonStiffODE/LotkaVolterra_wpd/#Conclusion","page":"-","title":"Conclusion","text":"","category":"section"},{"location":"markdown/NonStiffODE/LotkaVolterra_wpd/","page":"-","title":"-","text":"The OrdinaryDiffEq.jl are quicker and still solve to a much higher accuracy, especially when the interpolations are involved. ODE.jl errors a lot.","category":"page"},{"location":"markdown/NonStiffODE/LotkaVolterra_wpd/#Appendix","page":"-","title":"Appendix","text":"","category":"section"},{"location":"markdown/NonStiffODE/LotkaVolterra_wpd/","page":"-","title":"-","text":"These benchmarks are a part of the SciMLBenchmarks.jl repository, found at: https://github.com/SciML/SciMLBenchmarks.jl. For more information on high-performance scientific machine learning, check out the SciML Open Source Software Organization https://sciml.ai.","category":"page"},{"location":"markdown/NonStiffODE/LotkaVolterra_wpd/","page":"-","title":"-","text":"To locally run this benchmark, do the following commands:","category":"page"},{"location":"markdown/NonStiffODE/LotkaVolterra_wpd/","page":"-","title":"-","text":"using SciMLBenchmarks\nSciMLBenchmarks.weave_file(\"benchmarks/NonStiffODE\",\"LotkaVolterra_wpd.jmd\")","category":"page"},{"location":"markdown/NonStiffODE/LotkaVolterra_wpd/","page":"-","title":"-","text":"Computer Information:","category":"page"},{"location":"markdown/NonStiffODE/LotkaVolterra_wpd/","page":"-","title":"-","text":"Julia Version 1.6.5\nCommit 9058264a69 (2021-12-19 12:30 UTC)\nPlatform Info:\n  OS: Linux (x86_64-pc-linux-gnu)\n  CPU: AMD EPYC 7502 32-Core Processor\n  WORD_SIZE: 64\n  LIBM: libopenlibm\n  LLVM: libLLVM-11.0.1 (ORCJIT, znver2)\nEnvironment:\n  BUILDKITE_PLUGIN_JULIA_CACHE_DIR = /cache/julia-buildkite-plugin\n  JULIA_DEPOT_PATH = /cache/julia-buildkite-plugin/depots/5b300254-1738-4989-ae0a-f4d2d937f953\n","category":"page"},{"location":"markdown/NonStiffODE/LotkaVolterra_wpd/","page":"-","title":"-","text":"Package Information:","category":"page"},{"location":"markdown/NonStiffODE/LotkaVolterra_wpd/","page":"-","title":"-","text":"      Status `/cache/build/exclusive-amdci3-0/julialang/scimlbenchmarks-dot-jl/benchmarks/NonStiffODE/Project.toml`\n  [f3b72e0c] DiffEqDevTools v2.27.2\n  [7f56f5a3] LSODA v0.7.0\n  [c030b06c] ODE v2.13.0\n  [54ca160b] ODEInterface v0.5.0\n  [09606e27] ODEInterfaceDiffEq v3.10.0\n  [1dea7af3] OrdinaryDiffEq v5.53.0\n  [65888b18] ParameterizedFunctions v5.10.0\n  [91a5bcdd] Plots v1.13.2\n  [31c91b34] SciMLBenchmarks v0.1.0\n  [c3572dad] Sundials v4.4.3\n  [9a3f8284] Random","category":"page"},{"location":"markdown/NonStiffODE/LotkaVolterra_wpd/","page":"-","title":"-","text":"And the full manifest:","category":"page"},{"location":"markdown/NonStiffODE/LotkaVolterra_wpd/","page":"-","title":"-","text":"      Status `/cache/build/exclusive-amdci3-0/julialang/scimlbenchmarks-dot-jl/benchmarks/NonStiffODE/Manifest.toml`\n  [c3fe647b] AbstractAlgebra v0.16.0\n  [1520ce14] AbstractTrees v0.3.4\n  [79e6a3ab] Adapt v3.3.0\n  [ec485272] ArnoldiMethod v0.1.0\n  [4fba245c] ArrayInterface v3.1.11\n  [9e28174c] BinDeps v1.0.2\n  [fa961155] CEnum v0.4.1\n  [d360d2e6] ChainRulesCore v0.9.41\n  [b630d9fa] CheapThreads v0.2.3\n  [35d6a980] ColorSchemes v3.12.1\n  [3da002f7] ColorTypes v0.11.0\n  [5ae59095] Colors v0.12.8\n  [861a8166] Combinatorics v1.0.2\n  [38540f10] CommonSolve v0.2.0\n  [bbf7d656] CommonSubexpressions v0.3.0\n  [34da2185] Compat v3.28.0\n  [8f4d0f93] Conda v1.5.2\n  [187b0558] ConstructionBase v1.2.1\n  [d38c429a] Contour v0.5.7\n  [9a962f9c] DataAPI v1.6.0\n  [864edb3b] DataStructures v0.18.9\n  [e2d170a0] DataValueInterfaces v1.0.0\n  [2b5f629d] DiffEqBase v6.61.0\n  [f3b72e0c] DiffEqDevTools v2.27.2\n  [c894b116] DiffEqJump v6.14.1\n  [77a26b50] DiffEqNoiseProcess v5.7.2\n  [163ba53b] DiffResults v1.0.3\n  [b552c78f] DiffRules v1.0.2\n  [b4f34e82] Distances v0.10.3\n  [31c24e10] Distributions v0.24.18\n  [ffbed154] DocStringExtensions v0.8.4\n  [d4d017d3] ExponentialUtilities v1.8.4\n  [e2ba6199] ExprTools v0.1.3\n  [8f5d6c58] EzXML v1.1.0\n  [c87230d0] FFMPEG v0.4.0\n  [7034ab61] FastBroadcast v0.1.4\n  [9aa1b823] FastClosures v0.3.2\n  [1a297f60] FillArrays v0.11.7\n  [6a86dc24] FiniteDiff v2.8.0\n  [53c48c17] FixedPointNumbers v0.8.4\n  [59287772] Formatting v0.4.2\n  [f6369f11] ForwardDiff v0.10.18\n  [069b7b12] FunctionWrappers v1.1.2\n  [28b8d3ca] GR v0.57.4\n  [5c1252a2] GeometryBasics v0.3.12\n  [d7ba0133] Git v1.2.1\n  [42e2da0e] Grisu v1.0.2\n  [cd3eb016] HTTP v0.9.8\n  [eafb193a] Highlights v0.4.5\n  [0e44f5e4] Hwloc v2.0.0\n  [7073ff75] IJulia v1.23.2\n  [615f187c] IfElse v0.1.0\n  [d25df0c9] Inflate v0.1.2\n  [83e8ac13] IniFile v0.5.0\n  [d8418881] Intervals v1.5.0\n  [c8e1da08] IterTools v1.3.0\n  [42fd0dbc] IterativeSolvers v0.9.0\n  [82899510] IteratorInterfaceExtensions v1.0.0\n  [692b3bcd] JLLWrappers v1.3.0\n  [682c06a0] JSON v0.21.1\n  [7f56f5a3] LSODA v0.7.0\n  [b964fa9f] LaTeXStrings v1.2.1\n  [2ee39098] LabelledArrays v1.6.0\n  [23fbe1c1] Latexify v0.15.5\n  [093fc24a] LightGraphs v1.3.5\n  [d3d80556] LineSearches v7.1.1\n  [2ab3a3ac] LogExpFunctions v0.2.3\n  [bdcacae8] LoopVectorization v0.12.18\n  [1914dd2f] MacroTools v0.5.6\n  [739be429] MbedTLS v1.0.3\n  [442fdcdd] Measures v0.3.1\n  [e1d29d7a] Missings v1.0.0\n  [78c3b35d] Mocking v0.7.1\n  [961ee093] ModelingToolkit v5.16.0\n  [46d2c3a1] MuladdMacro v0.2.2\n  [ffc61752] Mustache v1.0.10\n  [d8a4904e] MutableArithmetics v0.2.19\n  [d41bc354] NLSolversBase v7.8.0\n  [2774e3e8] NLsolve v4.5.1\n  [77ba4419] NaNMath v0.3.5\n  [8913a72c] NonlinearSolve v0.3.8\n  [c030b06c] ODE v2.13.0\n  [54ca160b] ODEInterface v0.5.0\n  [09606e27] ODEInterfaceDiffEq v3.10.0\n  [6fe1bfb0] OffsetArrays v1.7.0\n  [429524aa] Optim v1.3.0\n  [bac558e1] OrderedCollections v1.4.0\n  [1dea7af3] OrdinaryDiffEq v5.53.0\n  [90014a1f] PDMats v0.11.0\n  [65888b18] ParameterizedFunctions v5.10.0\n  [d96e819e] Parameters v0.12.2\n  [69de0a69] Parsers v1.1.0\n  [ccf2f8ad] PlotThemes v2.0.1\n  [995b91a9] PlotUtils v1.0.10\n  [91a5bcdd] Plots v1.13.2\n  [e409e4f3] PoissonRandom v0.4.0\n  [f27b6e38] Polynomials v2.0.10\n  [85a6dd25] PositiveFactorizations v0.2.4\n  [21216c6a] Preferences v1.2.1\n  [1fd47b50] QuadGK v2.4.1\n  [74087812] Random123 v1.3.1\n  [fb686558] RandomExtensions v0.4.3\n  [e6cf234a] RandomNumbers v1.4.0\n  [3cdcf5f2] RecipesBase v1.1.1\n  [01d81517] RecipesPipeline v0.3.2\n  [731186ca] RecursiveArrayTools v2.11.3\n  [f2c3362d] RecursiveFactorization v0.1.12\n  [189a3867] Reexport v1.0.0\n  [ae029012] Requires v1.1.3\n  [ae5879a3] ResettableStacks v1.1.0\n  [79098fc4] Rmath v0.7.0\n  [47965b36] RootedTrees v1.0.0\n  [7e49a35a] RuntimeGeneratedFunctions v0.5.2\n  [476501e8] SLEEFPirates v0.6.17\n  [1bc83da4] SafeTestsets v0.0.1\n  [0bca4576] SciMLBase v1.13.2\n  [31c91b34] SciMLBenchmarks v0.1.0\n  [6c6a2e73] Scratch v1.0.3\n  [efcf1570] Setfield v0.7.0\n  [992d4aef] Showoff v1.0.3\n  [699a6c99] SimpleTraits v0.9.3\n  [b85f4697] SoftGlobalScope v1.1.0\n  [a2af1166] SortingAlgorithms v1.0.0\n  [47a9eef4] SparseDiffTools v1.13.2\n  [276daf66] SpecialFunctions v1.3.0\n  [aedffcd0] Static v0.2.4\n  [90137ffa] StaticArrays v1.1.3\n  [82ae8749] StatsAPI v1.0.0\n  [2913bbd2] StatsBase v0.33.8\n  [4c63d2b9] StatsFuns v0.9.8\n  [7792a7ef] StrideArraysCore v0.1.7\n  [09ab397b] StructArrays v0.5.1\n  [c3572dad] Sundials v4.4.3\n  [d1185830] SymbolicUtils v0.11.2\n  [0c5d862f] Symbolics v0.1.25\n  [3783bdb8] TableTraits v1.0.1\n  [bd369af6] Tables v1.4.2\n  [8290d209] ThreadingUtilities v0.4.1\n  [f269a46b] TimeZones v1.5.4\n  [a759f4b9] TimerOutputs v0.5.8\n  [a2a6695c] TreeViews v0.3.0\n  [30578b45] URIParser v0.4.1\n  [5c2747f8] URIs v1.3.0\n  [3a884ed6] UnPack v1.0.2\n  [1986cc42] Unitful v1.7.0\n  [3d5dd08c] VectorizationBase v0.19.37\n  [81def892] VersionParsing v1.2.0\n  [19fa3120] VertexSafeGraphs v0.1.2\n  [44d3d7a6] Weave v0.10.8\n  [ddb6d928] YAML v0.4.6\n  [c2297ded] ZMQ v1.2.1\n  [700de1a5] ZygoteRules v0.2.1\n  [6e34b625] Bzip2_jll v1.0.6+5\n  [83423d85] Cairo_jll v1.16.0+6\n  [5ae413db] EarCut_jll v2.1.5+1\n  [2e619515] Expat_jll v2.2.7+6\n  [b22a6f82] FFMPEG_jll v4.3.1+4\n  [a3f928ae] Fontconfig_jll v2.13.1+14\n  [d7e528f0] FreeType2_jll v2.10.1+5\n  [559328eb] FriBidi_jll v1.0.5+6\n  [0656b61e] GLFW_jll v3.3.4+0\n  [d2c73de3] GR_jll v0.57.2+0\n  [78b55507] Gettext_jll v0.20.1+7\n  [f8c6e375] Git_jll v2.31.0+0\n  [7746bdde] Glib_jll v2.59.0+4\n  [e33a78d0] Hwloc_jll v2.4.1+0\n  [aacddb02] JpegTurbo_jll v2.0.1+3\n  [c1c5ebd0] LAME_jll v3.100.0+3\n  [aae0fff6] LSODA_jll v0.1.1+0\n  [dd4b983a] LZO_jll v2.10.0+3\n  [dd192d2f] LibVPX_jll v1.9.0+1\n  [e9f186c6] Libffi_jll v3.2.1+4\n  [d4300ac3] Libgcrypt_jll v1.8.5+4\n  [7e76a0d4] Libglvnd_jll v1.3.0+3\n  [7add5ba3] Libgpg_error_jll v1.36.0+3\n  [94ce4f54] Libiconv_jll v1.16.0+7\n  [4b2f31a3] Libmount_jll v2.34.0+3\n  [89763e89] Libtiff_jll v4.1.0+2\n  [38a345b3] Libuuid_jll v2.34.0+7\n  [c771fb93] ODEInterface_jll v0.0.1+0\n  [e7412a2a] Ogg_jll v1.3.4+2\n  [458c3c95] OpenSSL_jll v1.1.1+6\n  [efe28fd5] OpenSpecFun_jll v0.5.4+0\n  [91d4177d] Opus_jll v1.3.1+3\n  [2f80f16e] PCRE_jll v8.42.0+4\n  [30392449] Pixman_jll v0.40.0+0\n  [ea2cea3b] Qt5Base_jll v5.15.2+0\n  [f50d1b31] Rmath_jll v0.3.0+0\n  [fb77eaff] Sundials_jll v5.2.0+1\n  [a2964d1f] Wayland_jll v1.17.0+4\n  [2381bf8a] Wayland_protocols_jll v1.18.0+4\n  [02c8fc9c] XML2_jll v2.9.11+0\n  [aed1982a] XSLT_jll v1.1.33+4\n  [4f6342f7] Xorg_libX11_jll v1.6.9+4\n  [0c0b7dd1] Xorg_libXau_jll v1.0.9+4\n  [935fb764] Xorg_libXcursor_jll v1.2.0+4\n  [a3789734] Xorg_libXdmcp_jll v1.1.3+4\n  [1082639a] Xorg_libXext_jll v1.3.4+4\n  [d091e8ba] Xorg_libXfixes_jll v5.0.3+4\n  [a51aa0fd] Xorg_libXi_jll v1.7.10+4\n  [d1454406] Xorg_libXinerama_jll v1.1.4+4\n  [ec84b674] Xorg_libXrandr_jll v1.5.2+4\n  [ea2f1a96] Xorg_libXrender_jll v0.9.10+4\n  [14d82f49] Xorg_libpthread_stubs_jll v0.1.0+3\n  [c7cfdc94] Xorg_libxcb_jll v1.13.0+3\n  [cc61e674] Xorg_libxkbfile_jll v1.1.0+4\n  [12413925] Xorg_xcb_util_image_jll v0.4.0+1\n  [2def613f] Xorg_xcb_util_jll v0.4.0+1\n  [975044d2] Xorg_xcb_util_keysyms_jll v0.4.0+1\n  [0d47668e] Xorg_xcb_util_renderutil_jll v0.3.9+1\n  [c22f9ab0] Xorg_xcb_util_wm_jll v0.4.1+1\n  [35661453] Xorg_xkbcomp_jll v1.4.2+4\n  [33bec58e] Xorg_xkeyboard_config_jll v2.27.0+4\n  [c5fb5394] Xorg_xtrans_jll v1.4.0+3\n  [8f1865be] ZeroMQ_jll v4.3.2+6\n  [3161d3a3] Zstd_jll v1.4.8+0\n  [0ac62f75] libass_jll v0.14.0+4\n  [f638f0a6] libfdk_aac_jll v0.1.6+4\n  [b53b4c65] libpng_jll v1.6.37+6\n  [a9144af2] libsodium_jll v1.0.20+0\n  [f27f6e37] libvorbis_jll v1.3.6+6\n  [1270edf5] x264_jll v2020.7.14+2\n  [dfaa095f] x265_jll v3.0.0+3\n  [d8fb68d0] xkbcommon_jll v0.9.1+5\n  [0dad84c5] ArgTools\n  [56f22d72] Artifacts\n  [2a0f44e3] Base64\n  [ade2ca70] Dates\n  [8bb1440f] DelimitedFiles\n  [8ba89e20] Distributed\n  [f43a241f] Downloads\n  [7b1f6079] FileWatching\n  [9fa8497b] Future\n  [b77e0a4c] InteractiveUtils\n  [b27032c2] LibCURL\n  [76f85450] LibGit2\n  [8f399da3] Libdl\n  [37e2e46d] LinearAlgebra\n  [56ddb016] Logging\n  [d6f4376e] Markdown\n  [a63ad114] Mmap\n  [ca575930] NetworkOptions\n  [44cfe95a] Pkg\n  [de0858da] Printf\n  [3fa0cd96] REPL\n  [9a3f8284] Random\n  [ea8e919c] SHA\n  [9e88b42a] Serialization\n  [1a1011a3] SharedArrays\n  [6462fe0b] Sockets\n  [2f01184e] SparseArrays\n  [10745b16] Statistics\n  [4607b0f0] SuiteSparse\n  [fa267f1f] TOML\n  [a4e569a6] Tar\n  [8dfed614] Test\n  [cf7118a7] UUIDs\n  [4ec0a83e] Unicode\n  [e66e0078] CompilerSupportLibraries_jll\n  [deac9b47] LibCURL_jll\n  [29816b5a] LibSSH2_jll\n  [c8ffd9c3] MbedTLS_jll\n  [14a3606d] MozillaCACerts_jll\n  [4536629a] OpenBLAS_jll\n  [efcefdf7] PCRE2_jll\n  [bea87d4a] SuiteSparse_jll\n  [83775a58] Zlib_jll\n  [8e850ede] nghttp2_jll\n  [3f19e933] p7zip_jll","category":"page"},{"location":"README/#SciMLBenchmarks.jl:-Benchmarks-for-Scientific-Machine-Learning-(SciML)-and-Differential-Equation-Solver-Software","page":"Home","title":"SciMLBenchmarks.jl: Benchmarks for Scientific Machine Learning (SciML) and Differential Equation Solver Software","text":"","category":"section"},{"location":"README/","page":"Home","title":"Home","text":"(Image: Join the chat at https://gitter.im/JuliaDiffEq/Lobby) (Image: Build status)","category":"page"},{"location":"README/","page":"Home","title":"Home","text":"SciMLBenchmarks.jl holds webpages, pdfs, and notebooks showing the benchmarks for the SciML Scientific Machine Learning Software ecosystem, including cross-language benchmarks of differential equation solvers and methods for parameter estimation, training universal differential equations (and subsets like neural ODEs), tests of physics-informed neural networks (PINNs), and more.","category":"page"},{"location":"README/#Results","page":"Home","title":"Results","text":"","category":"section"},{"location":"README/","page":"Home","title":"Home","text":"Static outputs in pdf, markdown, and html reside in SciMLBenchmarksOutput.","category":"page"},{"location":"README/#Table-of-Contents","page":"Home","title":"Table of Contents","text":"","category":"section"},{"location":"README/","page":"Home","title":"Home","text":"Multi-Language Wrapper Benchmarks\nODE Solver Multi-Language Wrapper Package Work-Precision Benchmarks (MATLAB, SciPy, Julia, deSolve (R))\nTorchdiffeq vs DifferentialEquations.jl (/ DiffEqFlux.jl) Benchmarks\ntorchdiffeq vs Julia DiffEqFlux Neural ODE Training Benchmark\ntorchsde vs DifferentialEquations.jl / DiffEqFlux.jl\nJITCODE vs SciPy vs DifferentialEquations.jl on large network dynamics\nDifferentialEquations.jl vs Mujuco and DiffTaichi\nDiffEqFlux.jl / DifferentialEquations.jl vs Jax on an epidemic model\nDifferentialEquations.jl vs SciPy vs NumbaLSODA on a stiff ODE\nDifferentialEquations.jl vs SciPy vs NumbaLSODA\nNon-stiff Ordinary Differential Equations (ODEs)\nLinear Work-Precision Diagrams\nThree-Body Work-Precision Diagrams\nPleides Work-Precision Diagrams\nRigid Body Work-Precision Diagrams\nFizhugh-Nagumo Work-Precision Diagrams\nLotka-Volterra Work-Precision Diagrams\nDirect vs MATLAB Benchmark\nRunge-Kutta vs Taylor Integration on Pleides\nStiff Ordinary Differential Equations (ODEs)\nVan der Pol Work-Precision Diagrams\nROBER Work-Precision Diagrams\nOrego Work-Precision Diagrams\nHires Work-Precision Diagrams\nPollution Work-Precision Diagrams\nBCR (1122 ODE) Work-Precision Diagrams\nDifferential-Algebraic Equations (DAEs)\nROBER DAE Work-Precision Diagrams\nOREGO DAE Work-Precision Diagrams\nChemical Akzo Nobel Differential-Algebraic Equation (DAE) Work-Precision Diagrams\nMethod of Lines PDEs\nFilament PDE Discretization Work-Precision Diagrams\nAllen-Cahn Finite Difference Work-Precision Diagrams\nAllen-Cahn Pseudospectral Work-Precision Diagrams\nBurger's Finite Difference Work-Precision Diagrams\nBurger's Pseudospectral Work-Precision Diagrams\nKdV Finite Difference Work-Precision Diagrams\nKdV Pseudospectral Work-Precision Diagrams\nKuramotoâ€“Sivashinsky Finite Difference Work-Precision Diagrams\nKuramotoâ€“Sivashinsky Pseudospectral Work-Precision Diagrams\nDynamical ODEs\nSingle Pendulum Comparison Benchmark\nHenon-Heiles Energy Conservation Benchmark\nQuadrupole Boson Hamiltonian Energy Conservation Benchmark\nN-body problems\nAcceleration function benchmarks\nLiquid argon benchmarks\nNonstiff SDEs\nSimple Nonstiff SDE Strong Work-Precision Diagrams\nSimple Nonstiff SDE Weak Work-Precision Diagrams\nLotka-Volterra SDE Work-Precision Diagrams\nStiff SDEs\nStochastic Heat Equation Investigation\nQuadratic Diffusion Noise Investigation\nOval2 Long Run\nOval2 Long Timings\nOval2 Timings\nNonstiff DDEs\nConstant Delay DDEs\nMackey and Glass Work-Precision Diagrams\nWheldon, Kirk, and Finlay Work-Precision Diagrams\nStiff DDEs\nQuorum Sensing Work-Precision Diagrams\nJump Equations\nDiffusion Model\nMendes Multistate Model\nNegative Feedback Gene Expression Model\nNegative Feedback Marchetti Model\nParameter Estimation\nLorenz Equation Parameter Estimation by Optimization Methods\nBayesian Lotka-Volterra Parameter Estimation\nBayesian Lorenz Equation Estimation\nBayesian FitzHugh-Nagumo Equation Estimation\nLotka Volterra Equation Parameter Estimation by Optimization Methods\nFitzHugh-Nagumo Equation Parameter Estimation by Optimization Methods\nPhysics-Informed Neural Network (Neural Network PDE Solver) Cost Function Benchmarks\nAllen-Cahn PDE Physics-Informed Neural Network (PINN) Loss Function Error vs Time Benchmarks\nDiffusion Equation Physics-Informed Neural Network (PINN) Loss Function Error vs Time Benchmarks\nHamilton-Jacobi PDE Physics-Informed Neural Network (PINN) Loss Function Error vs Time Benchmarks\nLevel Set PDE Physics-Informed Neural Network (PINN) Loss Function Error vs Time Benchmarks\nNernst-Planck PDE Physics-Informed Neural Network (PINN) Loss Function Error vs Time Benchmarks\nPhysics-Informed Neural Network (Neural Network PDE Solver) Optimizer Benchmarks\nDiffusion Equation Physics-Informed Neural Network (PINN) Optimizer Benchmarks\n1D Nernst-Planck Equation Physics-Informed Neural Network (PINN) Optimizer Benchmarks\nAllen-Cahn Equation Physics-Informed Neural Network (PINN) Optimizer Benchmarks\nBerger's Equation Physics-Informed Neural Network (PINN) Optimizer Benchmarks\nHamilton-Jacobi Equation Physics-Informed Neural Network (PINN) Optimizer Benchmarks\nPoisson Equation Physics-Informed Neural Network (PINN) Optimizer Benchmarks","category":"page"},{"location":"README/","page":"Home","title":"Home","text":"The following tests were developed for the paper Adaptive Methods for Stochastic Differential Equations via Natural Embeddings and Rejection Sampling with Memory. These notebooks track their latest developments.","category":"page"},{"location":"README/","page":"Home","title":"Home","text":"SDE Adaptivity\nqmax Determination Tests\nAdaptive Efficiency Tests","category":"page"},{"location":"README/#Current-Summary","page":"Home","title":"Current Summary","text":"","category":"section"},{"location":"README/","page":"Home","title":"Home","text":"The following is a quick summary of the benchmarks. These paint broad strokes over the set of tested equations and some specific examples may differ.","category":"page"},{"location":"README/#Non-Stiff-ODEs","page":"Home","title":"Non-Stiff ODEs","text":"","category":"section"},{"location":"README/","page":"Home","title":"Home","text":"OrdinaryDiffEq.jl's methods are the most efficient by a good amount\nThe Vern methods tend to do the best in every benchmark of this category\nAt lower tolerances, Tsit5 does well consistently.\nARKODE and Hairer's dopri5/dop853 perform very similarly, but are both far less efficient than the Vern methods.\nThe multistep methods, CVODE_Adams and lsoda, tend to not do very well.\nThe ODEInterface multistep method ddeabm does not do as well as the other multistep methods.\nODE.jl's methods are not able to consistently solve the problems.\nFixed time step methods are less efficient than the adaptive methods.","category":"page"},{"location":"README/#Stiff-ODEs","page":"Home","title":"Stiff ODEs","text":"","category":"section"},{"location":"README/","page":"Home","title":"Home","text":"In this category, the best methods are much more problem dependent.\nFor smaller problems:\nRosenbrock23, lsoda, and TRBDF2 tend to be the most efficient at high   tolerances.\nRodas4 and Rodas5 tend to be the most efficient at low tolerances.\nFor larger problems (Filament PDE):\nQNDF and FBDF does the best at all normal tolerances.\nThe ESDIRK methods like TRBDF2 and KenCarp4 can come close.\nradau is always the most efficient when tolerances go to the low extreme (1e-13)\nFixed time step methods tend to diverge on every tested problem because the high stiffness results in divergence of the Newton solvers.\nARKODE is very inconsistent and requires a lot of tweaking in order to not diverge on many of the tested problems. When it doesn't diverge, the similar algorithms in OrdinaryDiffEq.jl (KenCarp4) are much more efficient in most cases.\nODE.jl and GeometricIntegrators.jl fail to converge on any of the tested problems.","category":"page"},{"location":"README/#Dynamical-ODEs","page":"Home","title":"Dynamical ODEs","text":"","category":"section"},{"location":"README/","page":"Home","title":"Home","text":"Higher order (generally order >=6) symplectic integrators are much more efficient than the lower order counterparts.\nFor high accuracy, using a symplectic integrator is not preferred. Their extra cost is not necessary since the other integrators are able to not drift simply due to having low enough error.\nIn this class, the DPRKN methods are by far the most efficient. The Vern methods do well for not being specific to the domain.","category":"page"},{"location":"README/#Non-Stiff-SDEs","page":"Home","title":"Non-Stiff SDEs","text":"","category":"section"},{"location":"README/","page":"Home","title":"Home","text":"For simple 1-dimensional SDEs at low accuracy, the EM and RKMil methods can do well. Beyond that, they are simply outclassed.\nThe SRA and SRI methods both are very similar within-class on the simple SDEs.\nSRA3 is the most efficient when applicable and the tolerances are low.\nGenerally, only low accuracy is necessary to get to sampling error of the mean.\nThe adaptive method is very conservative with error estimates.","category":"page"},{"location":"README/#Stiff-SDEs","page":"Home","title":"Stiff SDEs","text":"","category":"section"},{"location":"README/","page":"Home","title":"Home","text":"The high order adaptive methods (SRIW1) generally do well on stiff problems.\nThe \"standard\" low-order implicit methods, ImplicitEM and ImplicitRK, do not do well on all stiff problems. Some exceptions apply to well-behaved problems like the Stochastic Heat Equation.","category":"page"},{"location":"README/#Non-Stiff-DDEs","page":"Home","title":"Non-Stiff DDEs","text":"","category":"section"},{"location":"README/","page":"Home","title":"Home","text":"The efficiency ranking tends to match the ODE Tests, but the cutoff from low to high tolerance is lower.\nTsit5 does well in a large class of problems here.\nThe Vern methods do well in low tolerance cases.","category":"page"},{"location":"README/#Stiff-DDEs","page":"Home","title":"Stiff DDEs","text":"","category":"section"},{"location":"README/","page":"Home","title":"Home","text":"The Rosenbrock methods, specifically Rodas5, perform well.","category":"page"},{"location":"README/#Parameter-Estimation","page":"Home","title":"Parameter Estimation","text":"","category":"section"},{"location":"README/","page":"Home","title":"Home","text":"Broadly two different approaches have been used, Bayesian Inference and Optimisation algorithms.\nIn general it seems that the optimisation algorithms perform more accurately but that can be attributed to the larger number of data points being used in the optimisation cases, Bayesian approach tends to be slower of the two and hence lesser data points are used, accuracy can increase if proper data is used.\nWithin the different available optimisation algorithms, BBO from the BlackBoxOptim package and GNCRS2LM for the global case while LDSLSQP,LNBOBYQA and LN_NELDERMEAD for the local case from the NLopt package perform the best.\nAnother algorithm being used is the QuadDIRECT algorithm, it gives very good results in the shorter problem case but doesn't do very well in the case of the longer problems.\nThe choice of global versus local optimization make a huge difference in the timings. BBO tends to find the correct solution for a global optimization setup. For local optimization, most methods in NLopt, like :LN_BOBYQA, solve the problem very fast but require a good initial condition.\nThe different backends options available for Bayesian method offer some tradeoffs beteween time, accuracy and control. It is observed that sufficiently high accuracy can be observed with any of the backends with the fine tuning of stepsize, constraints on the parameters, tightness of the priors and number of iterations being passed.","category":"page"},{"location":"README/#Interactive-Notebooks","page":"Home","title":"Interactive Notebooks","text":"","category":"section"},{"location":"README/","page":"Home","title":"Home","text":"To run the tutorials interactively via Jupyter notebooks and benchmark on your own machine","category":"page"},{"location":"README/","page":"Home","title":"Home","text":"Run Weave for the file (or folder) you are interested in\nActivate the appropriate environment\nOpen and run the notebook.","category":"page"},{"location":"README/","page":"Home","title":"Home","text":"Note: Since notebooks default to looking for a Project.toml file at the same level or parent folder, you might need to move the notebook to the folder with the appropriate Project.toml.","category":"page"},{"location":"README/#Example-(starting-from-the-project-root-folder)","page":"Home","title":"Example (starting from the project root folder)","text":"","category":"section"},{"location":"README/","page":"Home","title":"Home","text":"]activate .\n]instantiate\nusing SciMLBenchmarks\nSciMLBenchmarks.weave_file(\"benchmarks/Jumps\", \"Diffusion_CTRW.jmd\", [:notebook])\n]activate benchmarks/Jumps","category":"page"},{"location":"README/","page":"Home","title":"Home","text":"Then move Diffusion_CTRW.ipynb to \"benchmarks/Jumps\" and open the notebook.","category":"page"},{"location":"README/#Contributing","page":"Home","title":"Contributing","text":"","category":"section"},{"location":"README/","page":"Home","title":"Home","text":"All of the files are generated from the Weave.jl files in the benchmarks folder. To run the generation process, do for example:","category":"page"},{"location":"README/","page":"Home","title":"Home","text":"]activate SciMLBenchmarks # Get all of the packages\nusing SciMLBenchmarks\nSciMLBenchmarks.weave_file(\"NonStiffODE\",\"linear_wpd.jmd\")","category":"page"},{"location":"README/","page":"Home","title":"Home","text":"To generate all of the files in a folder, for example, run:","category":"page"},{"location":"README/","page":"Home","title":"Home","text":"SciMLBenchmarks.weave_folder(\"NonStiffODE\")","category":"page"},{"location":"README/","page":"Home","title":"Home","text":"To generate all of the notebooks, do:","category":"page"},{"location":"README/","page":"Home","title":"Home","text":"SciMLBenchmarks.weave_all()","category":"page"},{"location":"README/","page":"Home","title":"Home","text":"Each of the benchmarks displays the computer characteristics at the bottom of the benchmark. Since performance-necessary computations are normally performed on compute clusters, the official benchmarks use a workstation with an Intel Xeon CPU E5-2680 v4 @ 2.40GHz to match the performance characteristics of a standard node in a high performance computing (HPC) cluster or cloud computing setup.","category":"page"},{"location":"README/#Inspecting-Benchmark-Results","page":"Home","title":"Inspecting Benchmark Results","text":"","category":"section"},{"location":"README/","page":"Home","title":"Home","text":"To see benchmark results before merging, click into the BuildKite, click onto Artifacts, and then investigate the trained results.","category":"page"},{"location":"README/","page":"Home","title":"Home","text":"(Image: )","category":"page"},{"location":"#LinearSolve.jl:-High-Performance-Unified-Linear-Solvers","page":"LinearSolve.jl: High-Performance Unified Linear Solvers","title":"LinearSolve.jl: High-Performance Unified Linear Solvers","text":"","category":"section"},{"location":"","page":"LinearSolve.jl: High-Performance Unified Linear Solvers","title":"LinearSolve.jl: High-Performance Unified Linear Solvers","text":"LinearSolve.jl is a unified interface for the linear solving packages of Julia. It interfaces with other packages of the Julia ecosystem to make it easy to test alternative solver packages and pass small types to control algorithm swapping. It also interfaces with the ModelingToolkit.jl world of symbolic modeling to allow for automatically generating high-performance code.","category":"page"},{"location":"","page":"LinearSolve.jl: High-Performance Unified Linear Solvers","title":"LinearSolve.jl: High-Performance Unified Linear Solvers","text":"Performance is key: the current methods are made to be highly performant on scalar and statically sized small problems, with options for large-scale systems. If you run into any performance issues, please file an issue.","category":"page"},{"location":"#Installation","page":"LinearSolve.jl: High-Performance Unified Linear Solvers","title":"Installation","text":"","category":"section"},{"location":"","page":"LinearSolve.jl: High-Performance Unified Linear Solvers","title":"LinearSolve.jl: High-Performance Unified Linear Solvers","text":"To install LinearSolve.jl, use the Julia package manager:","category":"page"},{"location":"","page":"LinearSolve.jl: High-Performance Unified Linear Solvers","title":"LinearSolve.jl: High-Performance Unified Linear Solvers","text":"using Pkg\nPkg.add(\"LinearSolve\")","category":"page"},{"location":"#Contributing","page":"LinearSolve.jl: High-Performance Unified Linear Solvers","title":"Contributing","text":"","category":"section"},{"location":"","page":"LinearSolve.jl: High-Performance Unified Linear Solvers","title":"LinearSolve.jl: High-Performance Unified Linear Solvers","text":"Please refer to the SciML ColPrac: Contributor's Guide on Collaborative Practices for Community Packages for guidance on PRs, issues, and other matters relating to contributing to ModelingToolkit.\nThere are a few community forums:\nthe #diffeq-bridged channel in the Julia Slack\nJuliaDiffEq on Gitter\non the Julia Discourse forums\nsee also SciML Community page","category":"page"},{"location":"#Roadmap","page":"LinearSolve.jl: High-Performance Unified Linear Solvers","title":"Roadmap","text":"","category":"section"},{"location":"","page":"LinearSolve.jl: High-Performance Unified Linear Solvers","title":"LinearSolve.jl: High-Performance Unified Linear Solvers","text":"Wrappers for every linear solver in the Julia language is on the roadmap. If there are any important ones that are missing that you would like to see added, please open an issue. The current algorithms should support automatic differentiation. Pre-defined preconditioners would be a welcome addition.","category":"page"}]
}
